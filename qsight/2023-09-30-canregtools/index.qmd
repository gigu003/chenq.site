---
title: "R包canregtools：肿瘤登记可视化和自动化报告"
subtitle: "促进肿瘤登记数据的分析、可视化和报告流程化"
description: |
  为了使肿瘤登记数据分析和可视化更加容易，我写了一个R语言软件包“*canregtools*”，这篇博文将详细介绍这个R包的功能和使用。
execute: 
  warning: false
authors:
  - name: 陈琼
    affilliation: 河南省癌症中心/河南省肿瘤医院
    email: chenq08@126.com
date: 2023-09-30
categories:
  - 肿瘤登记
  - R语言
image: preview.jpg
---

R语言包“*canregtools*”提供了肿瘤登记常规数据分析中常用的数据处理、可视化、自动化报告等功能，该包的主要目的是通过一系列R语言函数功能实现肿瘤登记数据常规数据分析和数据可视化功能，并通过整合不同函数功能从而实现应用于不同场景的肿瘤登记报告，在统一的R语言环境中让肿瘤登记数据分析更流畅。

目前*canregtools*包还处在开发阶段，新的功能会不断补充更新到该包中，大家可以登陆[canregtools包网站](https://caregtools.chenq.site)了解开发进度和最新功能，如果您有关于该包的建议，请[发送邮件](mailto:chenq08@126.com)给我。

## canregtools的安装
该包还正处于开发阶段，暂时还没有准备将其提交至CRAN，我们会等其功能稳定之后再考虑将其正式提交。目前代码托管在github上，大家可以通过下面的代码进行安装。

```{{r}}
library(devtools)
install_github("gigu003/canregtools")
```

在开始介绍canregtools包之前，首先看看我们包的运行环境。

```{r}
library(devtools)
session_info()
```


## 主要功能介绍
该包的主要功能分为以下几类：数据读取、数据整理、指标计算、可视化、表单制作和生成报告等。

## 数据读取
目前该包可以读取国家癌症中心发布的数据上报格式（call for data），包括以EXCEL格式保存的单年数据或生存数据，通过*read_canreg()*函数来实现。我们在包里内置了按照国家癌症中心数据上报格式准备的excel数据文档("411721.xls")。

```{r}
#| code-overflow: scroll
library(canregtools)
file <- system.file("extdata", "411721.xls", package = "canregtools")
data <- read_canreg(file)
```

我们给读入的原始数据定义一个类"canreg"， 我们可以通过class函数查看一下。

```{r}
class(data)
```



## 数据整理
数据整理函数主要为*count_canreg()*，它可以把读入的class类型为*canreg*的原始数据整理为各个变量的频数数据，我们给这个频数数据定义了一个类为‘fbswicd’。

```{r}
fbsw <- count_canreg(data)
class(fbsw)
```

这个函数还可以指定一些参数值从而实现对*年龄*、*癌症分类*、*语言类型*使用不同的分类方法。

比如癌症分类方法，我们按照不同解剖学系统进行分类、大类或小类进行分类。

```{r}
# 指定癌症分类方法为system
fbsw <- count_canreg(data, type = "system")
```

```{r}
# 指定癌症分类方法为small，并指定输出语言为英语
fbsw <- count_canreg(data, type = "small", lang="en")
```

## 统计指标计算
### 年龄标化率
计算年龄标化率的函数为ageadjust()，可以基于不同标准人口计算年龄标化率，并基于不同方法估计可信区间。该函数主要有以下参数：

```{r}
#| eval: false
ageadjust(
  count, #不同年龄组病例数
  pop, #不同年龄组风险人口数
  rate = NULL, #不同年龄组发病率
  stdpop = NULL, #各年龄组标准人口数
  method = "gamma", #估计可信区间的方法，选项为'gamma', 'normal'，'lognormal'
  conf_level = 0.95, #设置可信区间水平, 范围为0-1， 0.95则输出95%可信区间
  mp = 1e+05
)
```

举个具体的例子：

```{r}
cases <- c(50, 60, 45, 70)
pop <- c(1000, 1200, 1100, 900)
spop <- c(800, 1000, 1100, 900)
ageadjust(cases, pop, stdpop = spop, mp = 100000)
```

这是一个向量化的函数，如果你使用tidyverse进行数据处理时，你可以把他放到*mutate*或*reframe*函数内使用。

### 基于类canreg或fbswicd计算标化率
我们把数据读入R以后被转换为'canreg'类，我可以直接基于'canreg'数据计算标化率。函数为*create_asr()*，该函数的参数如下：

```{r}
#| eval: false
create_asr(
  x, # 类为canreg或fbswicd的数据
  ..., #指定输出的分类: year,sex,icd_cat
  event = fbs, #指定计算年龄率的变量
  pop = rks, # 指定人口数变量
  agegrp = agegrp, #指定年龄分组变量
  std = c(china, segi), #指定标准人口
  mp = 1e+05, 
  decimal = 2, #输出小数位
  show_var = FALSE, #是否输出方差
  show_ci = FALSE, #是否输出可信区间
  keep_sex_specific = FALSE #是否保留年龄别专属癌种值
)
```

基于*canreg*类数据计算标化率,同时也可以输出0-74岁累积率和35-64岁截缩率。
```{r}
asr <- create_asr(data, year, sex, icd_cat)
asr
```

同样，也可以基于*fbswicd*类数据计算标化率。
```{r}
asr <- create_asr(fbsw, year, sex, icd_cat)
asr
```


## 数据可视化
### 绘制人口金字塔图
绘图函数为draw_pyramid()，该函数的主要功能为绘制一个或多个人口金字塔，用于展示人口数据结构。该函数主要有以下参数：
```{r}
#| eval: false
draw_pyramid(
  x, # 类为"canreg"或"fbswicd"的数据 
  show_value = TRUE, #是否在人口金字塔上显示人口数
  show_prop = TRUE,  #是否在人口金字塔上显示人口比例
  left_axis = NULL, #设置人口金字塔左侧坐标轴值
  right_axis = NULL, #设置人口金字塔右侧坐标轴值
  axis_fm = "g", 
  axis_bm = "",
  axis_bi = 3,
  cgap = 0.3, # 人口金字塔的中间间隔宽度
  cstep = 1, # 间隔1个条形显示人口金字塔
  csize = 1, #设置字体大小，默认为1
  labs = c("Males", "Ages", "Females"), # 设置左中右坐标标签
  gl = TRUE, # 是否显示竖型背景条
  cadj = 0, # 调整标签位置
  cols = c("#006400", "#b32134"), # 设置人口金字塔条颜色
  dens = c(-1, -1),
  main = "", # 设置人口金字塔图的标题
  grid = c(2, 3) #如果绘制多个图，设置显示方式，c(2,3) 设置为2行3列
)
```


```{r}
draw_pyramid(fbsw,
             csize = 0.8,
             cgap = 0.4,
             cols = c("steelblue", "pink"),
             grid = c(1,1))
```

如果不想显示人口金字塔人口数字可以，设置*show_value = FALSE*，不显示这些数据。
```{r}
draw_pyramid(fbsw,
             csize = 0.8,
             cgap = 0.4,
             show_value = FALSE,
             cols = c("steelblue", "pink"),
             grid = c(1,1))
```

### 绘制条形图
肿瘤登记年报中经常会出现各种各样的条形图，该包通过*draw_barchart()*来绘制这种类型的图。该函数的参数如下：



```{r}
library(dplyr)
library(tidyr)
library(showtext)
showtext_auto()
asr <- create_asr(data, event = fbs, sex, icd_cat) |> 
  select(sex,icd_cat,asr_china) |> 
  mutate(sex = factor(sex, labels = c("male","female"))) |> 
  pivot_wider(names_from = c("sex"),values_from = c("asr_china")) |> 
  arrange(male)

draw_bar(list(asr$male),
         cates = as.character(asr$icd_cat),
         bar_side = 2,
         label = c("男性","男性"))
```




```{r}
#| eval: false
draw_barchart(
  data, #用于绘图的数据框
  plot_var = cr, #用于绘图的变量
  cate_var = icd_cat, #分类变量
  group_var = year, #分组变量
  side_var = sex,
  topn = 10,
  bar_side = 1,
  nrow = 2,
  ...
)
```


```{r}
#| column: screen-left
#| fig-height: 3
library(dplyr)
library(showtext)
showtext_auto()
asr1 <- create_asr(data, event = fbs, sex, icd_cat) |>
  bind_rows(create_asr(data, event = fbs, icd_cat)) |> 
  select(sex, icd_cat, asr_china) |> 
  mutate(sex = ifelse(is.na(sex),3,sex),
         type = "发病率")
asr2 <- create_asr(data, event = sws, sex, icd_cat) |>
  bind_rows(create_asr(data, event = sws, icd_cat)) |> 
  select(sex, icd_cat, asr_china) |> 
  mutate(sex = ifelse(is.na(sex),3,sex),
         type = "死亡率") |> 
  bind_rows(asr1) |> 
  mutate(sex = factor(sex, labels = c("男性","女性","合计"))) |> 
  mutate(sex = as.character(sex))

draw_barchart(asr2,
              plot_var = asr_china,
              cate_var = icd_cat,
              group_var = type,
              side_var = sex,
              bar_side = 1,
              grid = c(1, 3))
```

```{r}
asr2 <- asr2 |> 
  filter(!sex == "合计") |> 
  arrange(type,sex,icd_cat) |> 
draw_barchart(
              plot_var = asr_china,
              cate_var = icd_cat,
              group_var = type,
              side_var = sex,
              grid = c(1, 1))
```

